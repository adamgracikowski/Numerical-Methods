function [testData] = get_testing_data(testNumber)
% Project 2, Assignment 20
% Adam GrÄ…cikowski, 327350
%
% The sole purpose of this function is setting up data
% for testing functions from 1 to 6

if ~ismember(testNumber, 1:6)
    error("Invalid test number provided.");
end % if

if testNumber == 1
    % setting up data for test1:
    testData.description = [
    "\tThis test is responsible for examining the correctness of the\n", ...
    "\tmultiplication operation for the case when the operands are:\n", ...
    "\ta tridiagonal, symmetric and real matrix and a column vector.\n", ...
    "\tIn each test case, the following are displayed:\n", ...
    "\ta matrix being the right operand,\n", ...
    "\ta column vector being the left operand,\n", ...
    "\tand the norm of the difference between the expected value\n", ...
    "\tof the product and the value obtained using\n", ...
    "\tthe multiply3diag function. The norm is expressed as a multiple\n", ...
    "\tof epsilon.\n"];
    testData.n = [2, 3, 4, 8, 10];
    testData.numOfTestCases = length(testData.n);
    testData.imin = 1;
    testData.imax = 9;
    return;
end % if

if testNumber == 2
    % setting up data for test2:
    testData.description = [
    "\tThis test is responsible for examining the correctness of\n", ...
    "\ttransforming a tridiagonal, symmetric and real matrix to\n", ...
    "\tan upper-triangular form, using Householder reflections.\n", ...
    "\tIn each test case, the following are displayed: a matrix A being\n", ...
    "\tthe subject of the transformation, an actual form of the R matrix\n", ...
    "\t(after transformation) obtained using transform3diag function and\n", ...
    "\tFrobenius norm: ||A - QR|| expressed in epsilons, where Q is\n", ...
    "\ta matrix created by multiplying transpositions of Householder\n", ...
    "\tmatrices in a reversed order.\n"];
    testData.n = [2, 3, 4, 8, 10];
    testData.numOfTestCases = length(testData.n);
    testData.imin = 1;
    testData.imax = 9;
    return;
end % if

if testNumber == 3
    % setting up data for test3:
    testData.description = [
    "\tThis test is responsible for examining the correctness of\n", ...
    "\tsolving a system of linear equations in a form of: Ax = b\n", ...
    "\tfor the case when A is a tridiagonal, symmetric and real matrix\n", ...
    "\tand b is a column vector. The system of equations is solved by\n", ...
    "\ttransforming the matrix A into an upper-triangular form using\n", ...
    "\tHouseholder reflections. Then backward substitution is performed.\n", ...
    "\tIn each test case, the following are displayed: the system of\n", ...
    "\tequations to be solved, that is the matrix A, the column\n", ...
    "\tvector b, the solution x (obtained by using transform2diag and\n", ...
    "\tbacksubs3diag) and a norm ||Ax - b|| expressed as a multiple\n", ...
    "\tof epsilons.\n"];
    testData.n = [2, 3, 4, 8, 10];
    testData.numOfTestCases = length(testData.n);
    testData.imin = 1;
    testData.imax = 9;
    return;
end % if

if testNumber == 4
    % setting up data for test4:
    testData.description = [
    "\tThis test is responsible for examining the accuracy of\n", ...
    "\tevaluation of the condition number for the case when the\n", ...
    "\tconsidered matrix is tridiagonal, symmetric and real.\n", ...
    "\tIn addition, matrix in each test case is a Teoplitz matrix, thus\n", ...
    "\tits eigenvalues can be determined using an explicit formula.\n", ...
    "\tThe formula, with a proper proof and explanation can be found here:\n", ...
    "\thttps://hal.science/hal-01461924/file/KST.pdf\n", ...
    "\tIn each test case, the following are displayed:\n", ...
    "\tthe tested matrix A, expected and actual eigenvalues found by\n", ...
    "\tthe power method and the inverse power method and expected as\n", ...
    "\twell as actual condition number. Expected and actual values\n", ...
    "\tare compared by evalutaing the absolute error expressed\n", ...
    "\tas a multiple of epsilon.\n"];
    testData.n = [2, 3, 4, 8, 10];
    testData.numOfTestCases = length(testData.n);
    testData.imin = 1;
    testData.imax = 9;
    return;
end % if

if testNumber == 6
    % setting up data for test6:
    testData.description = [
    "\tThis test is responsible for examining the speed of convergence\n", ...
    "\tof power method for the case when the considered matrix is \n", ...
    "\ttridiagonal, symmetric and real. In addition, matrix in each test\n", ...
    "\tcase is a Teoplitz matrix, thus its eigenvalues can be determined\n", ...
    "\tusing an explicit formula.\n", ...
    "\tThe formula, with a proper proof and explanation can be found here:\n", ...
    "\thttps://hal.science/hal-01461924/file/KST.pdf\n", ...
    "\tSince the error of the algorithm is exponential, it forms a straight\n", ...
    "\tline when presented on a logarithmic scale (on the Y-axis).\n", ...
    "\tThe slope of the line is evaluated based on the\n", ...
    "\tlast_eigenvalue_change returned by power3diag function.\n", ...
    "\tThen simple linear regression is applied on a vector of errors to\n", ...
    "\tfind the slope of the line. On the other side, it is known that the\n", ...
    "\tspeed of convergence of the power method depends on an absolute\n", ...
    "\tvalue of the quotient of proper eigenvalues.\n", ...
    "\tIn each test case, the following are displayed:\n", ...
    "\tthe tested matrix A, an expected slope of the error when plotted\n", ...
    "\tin a semilogy way and an actual slope of the error evaluated based\n", ...
    "\ton power3diag and the aforementioned linear regression.\n"];
    testData.n = [2, 3, 4, 8, 10];
    testData.numOfTestCases = length(testData.n);
    testData.a = [2, 4, 7, 5, 7];
    testData.b = [5, 6, 8, 3, 6];
    testData.iter = [25, 5, 10, 40, 50];
end % if

end % function