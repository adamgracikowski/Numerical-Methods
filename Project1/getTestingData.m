function [testData] = getTestingData(testNumber)
% Project 1, Assignment 28
% Adam GrÄ…cikowski, 327350
%
% The sole purpose of this function is setting up data
% for testing functions from 1 to 5

if ~ismember(testNumber, 1:5)
    error("Invalid test number provided.");
end % if

if testNumber == 1
    % setting up data for test1:
    testData.Description = [
        "Name:   Polynomials of degree 0\n", ...
        "Desc:   This test is responsible for examining the\n", ... 
        "\t\taccuracy of integration of the implemented numerical\n", ...
        "\t\tmethod, for the case the integrand is a polynomial\n", ...
        "\t\tof degree 0. The numerical method applied is of fourth\n", ...
        "\t\torder, therefore, in theory accurate results are\n", ...
        "\t\texpected. The results of each test case are presented\n", ...
        "\t\tin a tabular manner. The first column of each table\n", ...
        "\t\tcontains the parameter determining the number of\n", ...
        "\t\tdivision triangles, the second column is the result\n", ...
        "\t\tof the integrating function and the third column is\n", ...
        "\t\tthe absolute error of approximation expressed\n", ...
        "\t\tin machine epsilons.\n"
        ];
    testData.VectorOfCases(1) = struct('formula', 'f(x, y) = 1', ...
        'exact', 2, ...
        'function', @test1Case1);
end % if

if testNumber == 2
    % setting up data for test2:
    testData.Description = [
        "Name:   Polynomials of degree 1\n", ...
        "Desc:   This test is responsible for examining the\n", ... 
        "\t\taccuracy of integration of the implemented numerical\n", ...
        "\t\tmethod, for the case the integrand is a polynomial\n", ...
        "\t\tof degree 1. The numerical method applied is of fourth\n", ...
        "\t\torder, therefore, in theory accurate results are\n", ...
        "\t\texpected. The results of each test case are presented\n", ...
        "\t\tin a tabular manner. The first column of each table\n", ...
        "\t\tcontains the parameter determining the number of\n", ...
        "\t\tdivision triangles, the second column is the result\n", ...
        "\t\tof the integrating function and the third column is\n", ...
        "\t\tthe absolute error of approximation expressed\n", ...
        "\t\tin machine epsilons.\n"
        ];
    testData.VectorOfCases(1) = struct('formula', 'f(x, y) = x + y', ...
        'exact', 0, ...
        'function', @test2Case1);
    testData.VectorOfCases(2) = struct('formula', 'f(x, y) = x - 5y', ...
        'exact', 0, ...
        'function', @test2Case2);
end % if

if testNumber == 3
    % setting up data for test3:
    testData.Description = [
        "Name:   Polynomials of degree 2\n", ...
        "Desc:   This test is responsible for examining the\n", ... 
        "\t\taccuracy of integration of the implemented numerical\n", ...
        "\t\tmethod, for the case the integrand is a polynomial\n", ...
        "\t\tof degree 2. The numerical method applied is of fourth\n", ...
        "\t\torder, therefore, in theory accurate results are\n", ...
        "\t\texpected. The results of each test case are presented\n", ...
        "\t\tin a tabular manner. The first column of each table\n", ...
        "\t\tcontains the parameter determining the number of\n", ...
        "\t\tdivision triangles, the second column is the result\n", ...
        "\t\tof the integrating function and the third column is\n", ...
        "\t\tthe absolute error of approximation expressed\n", ...
        "\t\tin machine epsilons.\n"
        ];
    testData.VectorOfCases(1) = struct('formula', ...
        'f(x, y) = xy', 'exact', 0, ...
        'function', @test3Case1);
    testData.VectorOfCases(2) = struct('formula', ...
        'f(x, y) = x^2 - 3y + 1', 'exact', 3, ...
        'function', @test3Case2);
    testData.VectorOfCases(3) = struct('formula', ...
        'f(x, y) = 2y^2 + 3x', 'exact', 2, ...
        'function', @test3Case3);
end % if

if testNumber == 4
    % setting up data for test4:
    testData.Description = [
        "Name:   Polynomials of degree 3\n", ...
        "Desc:   This test is responsible for examining the\n", ... 
        "\t\taccuracy of integration of the implemented numerical\n", ...
        "\t\tmethod, for the case the integrand is a polynomial\n", ...
        "\t\tof degree 3. The numerical method applied is of fourth\n", ...
        "\t\torder, therefore, in theory accurate results are\n", ...
        "\t\texpected. The results of each test case are presented\n", ...
        "\t\tin a tabular manner. The first column of each table\n", ...
        "\t\tcontains the parameter determining the number of\n", ...
        "\t\tdivision triangles, the second column is the result\n", ...
        "\t\tof the integrating function and the third column is\n", ...
        "\t\tthe absolute error of approximation expressed\n", ...
        "\t\tin machine epsilons.\n"
        ];
    testData.VectorOfCases(1) = struct('formula', ...
        'f(x, y) = y^3 + 2x^2 + 2', 'exact', 6, ...
        'function', @test4Case1);
    testData.VectorOfCases(2) = struct('formula', ...
        'f(x, y) = xy^2 + 2(x + 3)^2', 'exact', 38, ...
        'function', @test4Case2);
    testData.VectorOfCases(3) = struct('formula', ...
        'f(x, y) = y(x + 2)^2', 'exact', 0, ...
        'function', @test4Case3);
    testData.VectorOfCases(4) = struct('formula', ...
        'f(x, y) = (x - 1)^3 + y', 'exact', -5, ...
        'function', @test4Case4);
end % if

if testNumber == 5
    testData.Description = [
        "Name:   Order of accuracy error\n", ...
        "Desc:   This test is responsible for examining the\n", ...
        "\t\tintegration accuracy error for integrands that are\n", ...
        "\t\tpolynomials of degree 4 or higher. According to the\n", ...
        "\t\ttheory, the absolute error of approximation\n", ...
        "\t\tis O(1/n^4). The test results are presented in a tabular\n", ...
        "\t\tmanner. The first column of the table contains the\n", ...
        "\t\tparameter n, specifying the number of division\n", ...
        "\t\ttriangles. The second column contains the approximate\n", ...
        "\t\tvalue of the integral, the third column is the absolute\n", ...
        "\t\terror of approximation expressed in machine epsilons and\n", ...
        "\t\tthe fourth column is the quotient of the error in the\n", ...
        "\t\tprevious row divided by the error in the current row.\n", ...
        "\t\tThe number of partition triangles (4n^2) is doubled in\n", ...
        "\t\teach row, thus results close to 2^4 = 16\n", ...
        "\t\tare expected to appear.\n", ...
        ];
    testData.VectorOfCases(1) = struct('formula', ...
        'f(x, y) = 3x^4 + 3y^4', 'exact', 4, ...
        'function', @test5Case1);
    testData.VectorOfCases(2) = struct('formula', ...
        'f(x, y) = e^(x + 2y)', 'exact', ...
        (exp(1) - sinh(1) + cosh(1) - 8*cosh(2) + 6*cosh(3))/6, ...
        'function', @test5Case2);
end % if

    % integrands for test1:
    function f = test1Case1(xy)
        f = ones(1, size(xy, 2));
    end
    % integrands for test2:
    function f = test2Case1(xy)
        f = xy(1,:) + xy(2,:);
    end
    function f = test2Case2(xy)
        f = xy(2,:) - 5*xy(2,:);
    end
    % integrands for test3:
    function f = test3Case1(xy)
        f = xy(1,:).*xy(2,:);
    end
    function f = test3Case2(xy)
        f = xy(1,:).^2 - 3*xy(2,:) + 1;
    end
    function f = test3Case3(xy)
        f = 2*xy(2,:).^2 + 3*xy(1,:);
    end
    % integrands for test4:
    function f = test4Case1(xy)
        f = xy(2,:).^3 + 2*xy(1,:).^2 + 2;
    end
    function f = test4Case2(xy)
        f = xy(1,:).*xy(2,:).^2 + 2*(xy(1,:) + 3).^2;
    end
    function f = test4Case3(xy)
        f = xy(2,:).*(xy(1,:) + 2).^2;
    end
    function f = test4Case4(xy)
        f = (xy(1,:) - 1).^3 + xy(2,:);
    end
    % integrands for test5:
    function f = test5Case1(xy)
        f = 3*xy(1,:).^4 + 3*xy(2,:).^4;
    end
    function f = test5Case2(xy)
        f = exp(xy(1,:) + 2*xy(2,:));
    end
end % function